{"version":3,"file":"static/js/540.957a09aa.chunk.js","mappings":"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","sources":["components/Phonebook/PhoneForm.styled.jsx","redux/contacts/selectors.js","components/Phonebook/ContactFilter.jsx","components/Phonebook/FormList.jsx","components/Phonebook/PhoneForm.jsx","components/pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { styled } from 'styled-components';\nimport { Form, ErrorMessage, Field } from 'formik';\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  gap: 4px;\n  margin-bottom: 12px;\n`;\n\nexport const StyledField = styled(Field)`\n  flex-grow: 1;\n  padding: 8px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: 4px;\n  font: inherit;\n  line-height: 16px;\n  letter-spacing: 0.01em;\n  resize: none;\n  margin-left: 10px;\n`;\n\nexport const StyledError = styled(ErrorMessage)`\n  color: red;\n`;\n\nexport const ContactBtn = styled.button`\n  border: none;\n  font: inherit;\n  cursor: pointer;\n  outline: none;\n  padding: 0 8px;\n  border-radius: 4px;\n  background-color: #3f51b5;\n  color: #fff;\n\n  width: 100px;\n  height: 40px;\n\n  &:hover,\n  &:focus {\n    background-color: #3f51b5;\n  }\n  &:active {\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  }\n`;\n\nexport const ContactsLbl = styled.label`\n  text-decoration: none;\n  font-weight: 700;\n  color: #2a363b;\n`;\n\nexport const ContactsContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 20px;\n`;\n\nexport const FilterInput = styled.input`\n  flex-grow: 1;\n  padding: 8px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: 4px;\n  font: inherit;\n  line-height: 16px;\n  letter-spacing: 0.01em;\n  resize: none;\n  margin-left: 10px;\n`;\n\nexport const ContactSpan = styled.span`\n  padding-right: 15px;\n  margin-bottom: 10px;\n`;\n\nexport const FilterContactsBtn = styled.button`\n  border: none;\n  font: inherit;\n  cursor: pointer;\n  outline: none;\n  padding: 0 8px;\n  border-radius: 4px;\n  background-color: #3f51b5;\n  color: #fff;\n\n  width: 100px;\n  height: auto;\n\n  &:hover,\n  &:focus {\n    background-color: #3f51b5;\n  }\n  &:active {\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  }\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectDeletedContacts = state => state.contacts.deletedContacts;\nexport const selectRestoredContacts = state => state.contacts.deletedContacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setContactFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { FilterInput } from './PhoneForm.styled';\n\nexport const ContactFilter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const changeContactFilter = evt => {\n    dispatch(setContactFilter(evt.target.value.toLowerCase().trim()));\n  };\n  return (\n    <div>\n      <h2>Find contacts by name</h2>\n      <FilterInput\n        type=\"text\"\n        value={filter}\n        onChange={changeContactFilter}\n      ></FilterInput>\n    </div>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { ContactBtn, ContactSpan, FilterContactsBtn } from './PhoneForm.styled';\nimport {\n  deleteContact,\n  restoreDeletedContacts,\n} from 'redux/contacts/operations';\nimport {\n  selectFilteredContacts,\n  selectRestoredContacts,\n} from 'redux/contacts/selectors';\n\nexport const FormList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n  // console.log(filteredContacts);\n  const restoredContacts = useSelector(selectRestoredContacts);\n\n  const dispatch = useDispatch();\n\n  const onDeleteContact = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  const resetChanges = () => {\n    dispatch(restoreDeletedContacts(restoredContacts));\n  };\n\n  if (!Array.isArray(filteredContacts) || filteredContacts.length === 0) {\n    console.log(filteredContacts);\n    return null;\n  }\n  return (\n    <div>\n      <ul>\n        {filteredContacts.map(({ name, number, id }) => (\n          <li key={id}>\n            <ContactSpan>{name}:</ContactSpan>\n            <ContactSpan>{number}</ContactSpan>\n            <FilterContactsBtn onClick={() => onDeleteContact(id)}>\n              Delete\n            </FilterContactsBtn>\n          </li>\n        ))}\n      </ul>\n      <ContactBtn onClick={resetChanges}>Reset</ContactBtn>\n    </div>\n  );\n};\n","import { Formik } from 'formik';\nimport {\n  StyledForm,\n  StyledField,\n  StyledError,\n  ContactBtn,\n  ContactsContainer,\n  ContactsLbl,\n} from './PhoneForm.styled';\nimport * as Yup from 'yup';\nimport { toast } from 'react-toastify';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContacts } from 'redux/contacts/operations';\n\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/)\n    .required('Required!')\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!'),\n  number: Yup.string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/\n    )\n    .required('Required!')\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!'),\n});\n\nconst initialValues = { name: '', number: '' };\n\nexport const PhoneForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const onAddContact = newContact => {\n    const existingContact = contacts.find(\n      contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n    );\n    console.log(newContact);\n    if (existingContact) {\n      toast.info(`${newContact.name} is already in contacts.`, {\n        position: 'top-right',\n        autoClose: 2000,\n      });\n      return;\n    }\n    // const newItem = {\n    //   id: nanoid(),\n    //   name: newContact.name,\n    //   number: newContact.number,\n    // };\n    const action = addContacts(newContact);\n    dispatch(action);\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={(values, actions) => {\n        onAddContact({ ...values });\n        actions.resetForm();\n      }}\n    >\n      {({ handleSubmit }) => (\n        <StyledForm onSubmit={handleSubmit}>\n          <h2>PhoneBook</h2>\n          <ContactsContainer>\n            <ContactsLbl>\n              Name\n              <StyledField name=\"name\" />\n              <StyledError name=\"name\" component=\"div\" />\n            </ContactsLbl>\n            <ContactsLbl>\n              Number\n              <StyledField name=\"number\" />\n              <StyledError name=\"number\" component=\"div\" />\n            </ContactsLbl>\n          </ContactsContainer>\n          <div>\n            <ContactBtn type=\"submit\">Add contact</ContactBtn>\n          </div>\n        </StyledForm>\n      )}\n    </Formik>\n  );\n};\n","import { ContactFilter } from '../../Phonebook/ContactFilter';\nimport { FormList } from '../../Phonebook/FormList';\nimport { PhoneForm } from '../../Phonebook/PhoneForm';\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <title>PhoneBook</title>\n\n      <PhoneForm />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactFilter />\n      <FormList />\n    </div>\n  );\n}\n"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","StyledField","Field","_templateObject2","StyledError","ErrorMessage","_templateObject3","ContactBtn","_templateObject4","ContactsLbl","_templateObject5","ContactsContainer","_templateObject6","FilterInput","_templateObject7","ContactSpan","_templateObject8","FilterContactsBtn","_templateObject9","selectContacts","state","contacts","items","selectRestoredContacts","deletedContacts","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectFilteredContacts","createSelector","contact","name","toLowerCase","includes","ContactFilter","useSelector","dispatch","useDispatch","_jsxs","children","_jsx","type","value","onChange","evt","setContactFilter","target","trim","FormList","filteredContacts","restoredContacts","Array","isArray","length","map","_ref","number","id","onClick","contactId","deleteContact","restoreDeletedContacts","console","log","schema","Yup","shape","matches","required","min","max","initialValues","PhoneForm","Formik","validationSchema","onSubmit","values","actions","newContact","existingContact","find","toast","concat","position","autoClose","action","addContacts","onAddContact","_objectSpread","resetForm","handleSubmit","component","ContactsPage","useEffect","fetchContacts"],"sourceRoot":""}