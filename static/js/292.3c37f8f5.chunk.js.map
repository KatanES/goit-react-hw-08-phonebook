{"version":3,"file":"static/js/292.3c37f8f5.chunk.js","mappings":"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","sources":["redux/contacts/filterSlice.js","redux/contacts/selectors.js","components/Phonebook/ContactFilter.jsx","components/Phonebook/FormList.jsx","components/Phonebook/PhoneForm.styled.jsx","components/Phonebook/PhoneForm.jsx","components/pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst filterSlice = createSlice({\n  name: 'filter',\n  initialState: '',\n  reducers: {\n    setContactFilter(state, action) {\n      return action.payload;\n    },\n  },\n});\n\nexport const { setContactFilter } = filterSlice.actions;\n\nexport const filterReducer = filterSlice.reducer;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectDeletedContacts = state => state.contacts.deletedContacts;\n\nexport const selectRestoredContacts = state => state.contacts.deletedContacts;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setContactFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nexport const ContactFilter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const changeContactFilter = evt => {\n    dispatch(setContactFilter(evt.target.value.toLowerCase().trim()));\n  };\n  return (\n    <div>\n      <h2>Find contacts by name</h2>\n      <input type=\"text\" value={filter} onChange={changeContactFilter}></input>\n    </div>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  deleteContact,\n  restoreDeletedContacts,\n} from 'redux/contacts/operations';\nimport {\n  selectFilteredContacts,\n  selectRestoredContacts,\n} from 'redux/contacts/selectors';\n\nexport const FormList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n  // console.log(filteredContacts);\n  const restoredContacts = useSelector(selectRestoredContacts);\n\n  const dispatch = useDispatch();\n\n  const onDeleteContact = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  const resetChanges = () => {\n    dispatch(restoreDeletedContacts(restoredContacts));\n  };\n\n  if (!Array.isArray(filteredContacts) || filteredContacts.length === 0) {\n    console.log(filteredContacts);\n    return null;\n  }\n  return (\n    <div>\n      <ul>\n        {filteredContacts.map(({ name, number, id }) => (\n          <li key={id}>\n            <span>{name}:</span>\n            <span>{number}</span>\n            <button onClick={() => onDeleteContact(id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n      <button onClick={resetChanges}>Reset</button>\n    </div>\n  );\n};\n","import { styled } from 'styled-components';\nimport { Form, ErrorMessage, Field } from 'formik';\nexport const StyledForm = styled(Form)`\n  padding: 10px;\n  background-color: blanchedalmond;\n`;\n\nexport const StyledField = styled(Field)`\n  padding: 4px;\n  margin: 15px 15px;\n  background-color: whitesmoke;\n  border: solid 2px black;\n  width: auto;\n  height: 15px;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const StyledError = styled(ErrorMessage)`\n  color: red;\n`;\n","import { Formik } from 'formik';\nimport { StyledForm, StyledField, StyledError } from './PhoneForm.styled';\nimport * as Yup from 'yup';\nimport { toast } from 'react-toastify';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContacts } from 'redux/contacts/operations';\n\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/)\n    .required('Required!')\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!'),\n  number: Yup.string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/\n    )\n    .required('Required!')\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!'),\n});\n\nconst initialValues = { name: '', number: '' };\n\nexport const PhoneForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const onAddContact = newContact => {\n    const existingContact = contacts.find(\n      contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n    );\n    console.log(newContact);\n    if (existingContact) {\n      toast.info(`${newContact.name} is already in contacts.`, {\n        position: 'top-right',\n        autoClose: 2000,\n      });\n      return;\n    }\n    // const newItem = {\n    //   id: nanoid(),\n    //   name: newContact.name,\n    //   number: newContact.number,\n    // };\n    const action = addContacts(newContact);\n    dispatch(action);\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={(values, actions) => {\n        onAddContact({ ...values });\n        actions.resetForm();\n      }}\n    >\n      {({ handleSubmit }) => (\n        <StyledForm onSubmit={handleSubmit}>\n          <h2>PhoneBook</h2>\n          <label>\n            Name\n            <StyledField name=\"name\" />\n            <StyledError name=\"name\" component=\"div\" />\n          </label>\n          <label>\n            Number\n            <StyledField name=\"number\" />\n            <StyledError name=\"number\" component=\"div\" />\n          </label>\n\n          <button type=\"submit\">Add contact</button>\n        </StyledForm>\n      )}\n    </Formik>\n  );\n};\n","import { ContactFilter } from '../../Phonebook/ContactFilter';\nimport { FormList } from '../../Phonebook/FormList';\nimport { PhoneForm } from '../../Phonebook/PhoneForm';\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Helmet } from 'react-helmet';\n\nexport const ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Helmet>\n        <title>PhoneBook</title>\n      </Helmet>\n      <PhoneForm />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactFilter />\n      <FormList />\n    </div>\n  );\n};\n"],"names":["filterSlice","createSlice","name","initialState","reducers","setContactFilter","state","action","payload","actions","reducer","selectContacts","contacts","items","selectRestoredContacts","deletedContacts","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectFilteredContacts","createSelector","contact","toLowerCase","includes","ContactFilter","useSelector","dispatch","useDispatch","_jsxs","children","_jsx","type","value","onChange","evt","target","trim","FormList","filteredContacts","restoredContacts","Array","isArray","length","map","_ref","number","id","onClick","contactId","deleteContact","restoreDeletedContacts","console","log","StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","StyledField","Field","_templateObject2","StyledError","ErrorMessage","_templateObject3","schema","Yup","shape","matches","required","min","max","initialValues","PhoneForm","Formik","validationSchema","onSubmit","values","newContact","existingContact","find","toast","concat","position","autoClose","addContacts","onAddContact","_objectSpread","resetForm","handleSubmit","component","ContactsPage","useEffect","fetchContacts","Helmet"],"sourceRoot":""}